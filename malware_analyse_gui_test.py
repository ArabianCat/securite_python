import yara
import json
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time

# Définir la fonction pour générer un rapport
def generate_report(file_path, matches):
    report = {
        'file': file_path,
        'matches': [match.rule for match in matches]
    }
    with open("report.json", "a") as report_file:
        json.dump(report, report_file)
        report_file.write("\n")

# Fonction pour lancer le scan avec barre de progression
def run_scan():
    file_paths = filedialog.askopenfilenames(title="Sélectionnez les fichiers à scanner")
    if not file_paths:
        messagebox.showerror("Erreur", "Aucun fichier sélectionné.")
        return
    
    # Choisir la catégorie de scan
    category = category_var.get()
    if category == 1:
        rule_file = '000_common_rules.yar' if scan_type_var.get() == 1 else 'malware_index.yar'
    elif category == 2:
        rule_file = 'ransomware_index.yar'
    elif category == 3:
        rule_file = 'tout_index.yar'

    # Démarrer la barre de progression
    progress_bar["value"] = 0
    root.update_idletasks()

    # Nombre total de fichiers à scanner
    total_files = len(file_paths)
    progress_bar["maximum"] = total_files * 25

    # Liste pour stocker les résultats des fichiers scannés
    all_results = []

    # Lancer un thread pour chaque fichier
    for i, file_path in enumerate(file_paths):
        scan_thread = threading.Thread(target=perform_scan, args=(file_path, rule_file, i, total_files, all_results))
        scan_thread.start()

# Fonction de scan
def perform_scan(file_path, rule_file, file_index, total_files, all_results):
    try:
        # Compiler et exécuter les règles Yara
        rules = yara.compile(rule_file)
        
        # Simuler la progression par petites étapes durant le scan
        for i in range(1, 101, 20):
            progress_bar["value"] += (20 / total_files)
            root.update_idletasks()
            time.sleep(0.1)

        matches = rules.match(file_path)
        
        if matches:
            result_message = f"Le fichier {file_path} contient des correspondances :\n" + "\n".join([match.rule for match in matches])
            generate_report(file_path, matches)
        else:
            result_message = f"Aucune correspondance trouvée pour le fichier {file_path}."
        
        # Ajouter le résultat à la liste
        all_results.append(result_message)
    
    except Exception as e:
        error_message = f"Erreur lors du scan du fichier {file_index+1}/{total_files} : {str(e)}"
        all_results.append(error_message)
    
    finally:
        progress_bar["value"] = (file_index + 1) * (100 / total_files)

        # Si c'est le dernier fichier, afficher tous les résultats
        if file_index + 1 == total_files:
            result_summary = "\n\n".join(all_results)
            messagebox.showinfo("Résultats du scan", result_summary)

# Création de l'interface Tkinter
root = tk.Tk()
root.title("Scanner Yara")

# Charger l'image de fond
background_image = Image.open("background.jpg") 
background_photo = ImageTk.PhotoImage(background_image)

# Créer un canevas et placer l'image de fond
canvas = tk.Canvas(root, width=background_image.width, height=background_image.height)
canvas.pack(fill="both", expand=True)
canvas.create_image(0, 0, image=background_photo, anchor="nw")

# Ajouter les autres éléments d'interface sur le canevas
category_label = tk.Label(root, text="Choisissez la catégorie de scan :", bg="lightgrey")
category_label_window = canvas.create_window(10, 10, anchor="nw", window=category_label)

category_var = tk.IntVar()
malware_radio = tk.Radiobutton(root, text="Malware", variable=category_var, value=1, bg="lightgrey")
ransomware_radio = tk.Radiobutton(root, text="Ransomware", variable=category_var, value=2, bg="lightgrey")
tout_radio = tk.Radiobutton(root, text="Tout", variable=category_var, value=3, bg="lightgrey")
canvas.create_window(10, 40, anchor="nw", window=malware_radio)
canvas.create_window(10, 70, anchor="nw", window=ransomware_radio)
canvas.create_window(10, 100, anchor="nw", window=tout_radio)

scan_type_label = tk.Label(root, text="Choisissez le type de scan :", bg="lightgrey")
canvas.create_window(10, 130, anchor="nw", window=scan_type_label)

scan_type_var = tk.IntVar()
simple_radio = tk.Radiobutton(root, text="Simple", variable=scan_type_var, value=1, bg="lightgrey")
advanced_radio = tk.Radiobutton(root, text="Avancé", variable=scan_type_var, value=2, bg="lightgrey")
canvas.create_window(10, 160, anchor="nw", window=simple_radio)
canvas.create_window(10, 190, anchor="nw", window=advanced_radio)

# Ajouter une barre de progression
progress_bar = ttk.Progressbar(root, orient="horizontal", length=200, mode="determinate")
canvas.create_window(10, 250, anchor="nw", window=progress_bar)

# Ajouter un bouton pour lancer le scan
scan_button = tk.Button(root, text="Lancer le scan", command=run_scan)
canvas.create_window(10, 220, anchor="nw", window=scan_button)

# Lancer l'interface graphique
root.mainloop()